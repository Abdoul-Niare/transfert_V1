PS C:\Users\User\Desktop\Transfert_V2> cd .\projet_transfert2\
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make entity
Symfony 6.2.4 (env: dev, debug: true) #StandWithUkraine https://sf.to/ukraine

Usage:
  command [options] [arguments]

Options:
  -h, --help            Display help for the given command. When no command is given display help for the list command
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
  -e, --env=ENV         The Environment name. [default: "dev"]
      --no-debug        Switch off debug mode.
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands for the "make" namespace:
  make:auth                   Creates a Guard authenticator of different flavors
  make:command                Creates a new console command class
  make:controller             Creates a new controller class
  make:crud                   Creates CRUD for Doctrine entity class
  make:docker:database        Adds a database container to your docker-compose.yaml file
  make:entity                 Creates or updates a Doctrine entity class, and optionally
an API Platform resource
  make:fixtures               Creates a new class to load Doctrine fixtures
  make:form                   Creates a new form class
  make:functional-test        Creates a new test class
  make:message                Creates a new message and handler
  make:messenger-middleware   Creates a new messenger middleware
  make:migration              Creates a new migration based on database changes
  make:registration-form      Creates a new registration form system
  make:reset-password         Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle
  make:serializer:encoder     Creates a new serializer encoder class
  make:serializer:normalizer  Creates a new serializer normalizer class
  make:stimulus-controller    Creates a new Stimulus controller
  make:subscriber             Creates a new event subscriber class
  make:test                   [make:unit-test|make:functional-test] Creates a new test class
  make:twig-component         Creates a twig (or live) component
  make:twig-extension         Creates a new Twig extension with its runtime class
  make:unit-test              Creates a new test class
  make:user                   Creates a new security user class
  make:validator              Creates a new validator and constraint class
  make:voter                  Creates a new security voter class
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:entity

 Class name of the entity to create or update (e.g. DeliciousGnome):
 > Transfert

 created: src/Entity/Transfert.php
 created: src/Repository/TransfertRepository.php

 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > statut

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 45

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > montTransfert

 Field type (enter ? to see all types) [string]:
 > float

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > montBenef

 Field type (enter ? to see all types) [string]:
 > float

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > fraisEnvoi

 Field type (enter ? to see all types) [string]:
 > float

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > comTransfert

 Field type (enter ? to see all types) [string]:
 > float

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > comAgentLivreur

 Field type (enter ? to see all types) [string]:
 > float

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > nomBenef

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 45

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > numTelBenef

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 15

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > dateEnvoi

 Field type (enter ? to see all types) [string]:
 > datime

Main Types
  * string
  * text
  * boolean
  * integer (or smallint, bigint)
  * float

Relationships/Associations
  * relation (a wizard will help you build the relation)
  * ManyToOne
  * OneToMany
  * ManyToMany
  * OneToOne

Array/Object Types
  * array (or simple_array)
  * json
  * object
  * binary
  * blob

Date/Time Types
  * datetime (or datetime_immutable)
  * datetimetz (or datetimetz_immutable)
  * date (or date_immutable)
  * time (or time_immutable)
  * dateinterval

Other Types
  * ascii_string
  * decimal
  * guid

                                                                                        
 [ERROR] Invalid type "datime".                                                         
                                                                                        


 Field type (enter ? to see all types) [string]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > datePrisCharge

 Field type (enter ? to see all types) [string]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > dateLivr

 Field type (enter ? to see all types) [string]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > isVisible

 Field type (enter ? to see all types) [boolean]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php

 Add another property? Enter the property name (or press <return> to stop adding fields): >


           
  Success! 
           

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:entity

 Class name of the entity to create or update (e.g. AgreeableGnome):
 > Ville

 created: src/Entity/Ville.php
 created: src/Repository/VilleRepository.php

 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > name

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 > 45

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Ville.php

 Add another property? Enter the property name (or press <return> to stop adding fields): >


           
  Success! 
           

 Next: When you're ready, create a migration with php bin/console make:migration


PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:entity

 Class name of the entity to create or update (e.g. AgreeableChef):
 > Transfert

 Your entity already exists! So let's add some new fields!

 New property name (press <return> to stop adding fields):
 > villes

 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > Ville

What type of relationship is this?
 ------------ -----------------------------------------------------------------------
  Type         Description                                                           
 ------------ -----------------------------------------------------------------------
  ManyToOne    Each Transfert relates to (has) one Ville.
               Each Ville can relate to (can have) many Transfert objects.

  OneToMany    Each Transfert can relate to (can have) many Ville objects.
               Each Ville relates to (has) one Transfert.

  ManyToMany   Each Transfert can relate to (can have) many Ville objects.
               Each Ville can also relate to (can also have) many Transfert objects.

  OneToOne     Each Transfert relates to (has) exactly one Ville.
               Each Ville also relates to (has) exactly one Transfert.
 ------------ -----------------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > ManyToOne

 Is the Transfert.transferts property allowed to be null (nullable)? (yes/no) [yes]:
 > no

 Do you want to add a new property to Ville so that you can access/update Transfert objects from it - e.g. $ville->getTransferts()? (yes/no) [yes]:
 >

 A new property will also be added to the Ville class so that you can access the related
Transfert objects from it.

 New field name inside Ville [transferts]:
 >villes

 Do you want to activate orphanRemoval on your relationship?
 A Transfert is "orphaned" when it is removed from its related Ville.
 e.g. $ville->removeTransfert($transfert)

 NOTE: If a Transfert may *change* from one Ville to another, answer "no".

 Do you want to automatically delete orphaned App\Entity\Transfert objects (orphanRemoval)? (yes/no) [no]:
 >

 updated: src/Entity/Transfert.php
 updated: src/Entity/Ville.php

 Add another property? Enter the property name (or press <return> to stop adding fields): >


           
  Success! 
           

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:migration


           
  Success! 
           

 Next: Review the new migration "migrations/Version20230116222124.php"
 Then: Run the migration with php bin/console doctrine:migrations:migrate
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console doctrine:migrations:migrate

 WARNING! You are about to execute a migration in database "transfert_version2" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) [yes]:
 >

[notice] Migrating up to DoctrineMigrations\Version20230116222124
[notice] finished in 12553.4ms, used 20M memory, 1 migrations executed, 4 sql queries

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:user

 The name of the security user class (e.g. User) [User]:
 >

 Do you want to store user data in the database (via Doctrine)? (yes/no) [yes]:
 >

 Enter a property name that will be the unique "display" name for the user (e.g. email, username, uuid) [email]:
 > email

 Will this app need to hash/check user passwords? Choose No if passwords are not needed or will be checked/hashed by some other system (e.g. a single sign-on server).

 Does this app need to hash/check user passwords? (yes/no) [yes]:
 >

 created: src/Entity/User.php
 created: src/Repository/UserRepository.php
 updated: src/Entity/User.php
 updated: config/packages/security.yaml

           
  Success! 
           

 Next Steps:
   - Review your new App\Entity\User class.
   - Use make:entity to add more fields to your User entity and then run make:migration.
   - Create a way to authenticate! See https://symfony.com/doc/current/security.html
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:migration


           
  Success! 
           

 Next: Review the new migration "migrations/Version20230116223109.php"
 Then: Run the migration with php bin/console doctrine:migrations:migrate
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console doctrine:migrations:migrate

 WARNING! You are about to execute a migration in database "transfert_version2" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) [yes]:
 >

[notice] Migrating up to DoctrineMigrations\Version20230116223109
[notice] finished in 3193ms, used 20M memory, 1 migrations executed, 1 sql queries

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2>
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:entity

 Class name of the entity to create or update (e.g. FiercePuppy):
 > Transfert

 Your entity already exists! So let's add some new fields!

 New property name (press <return> to stop adding fields):
 > expediteur

 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > User

What type of relationship is this?
 ------------ ----------------------------------------------------------------------
  Type         Description                                                          
 ------------ ----------------------------------------------------------------------
  ManyToOne    Each Transfert relates to (has) one User.
               Each User can relate to (can have) many Transfert objects.

  OneToMany    Each Transfert can relate to (can have) many User objects.
               Each User relates to (has) one Transfert.

  ManyToMany   Each Transfert can relate to (can have) many User objects.
               Each User can also relate to (can also have) many Transfert objects.

  OneToOne     Each Transfert relates to (has) exactly one User.
               Each User also relates to (has) exactly one Transfert.
 ------------ ----------------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > ManyToOne

 Is the Transfert.expediteur property allowed to be null (nullable)? (yes/no) [yes]:
 >

 Do you want to add a new property to User so that you can access/update Transfert objects from it - e.g. $user->getTransferts()? (yes/no) [yes]:
 >

 A new property will also be added to the User class so that you can access the related Transfert objects from it.

 New field name inside User [transferts]:
 > expediteurs

 updated: src/Entity/Transfert.php
 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields): > agentLivreur

 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > User

What type of relationship is this?
 ------------ ----------------------------------------------------------------------
  Type         Description                                                          
 ------------ ----------------------------------------------------------------------
  ManyToOne    Each Transfert relates to (has) one User.
               Each User can relate to (can have) many Transfert objects.

  OneToMany    Each Transfert can relate to (can have) many User objects.
               Each User relates to (has) one Transfert.

  ManyToMany   Each Transfert can relate to (can have) many User objects.
               Each User can also relate to (can also have) many Transfert objects.

  OneToOne     Each Transfert relates to (has) exactly one User.
               Each User also relates to (has) exactly one Transfert.
 ------------ ----------------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > ManyToOne

 Is the Transfert.agentLivreur property allowed to be null (nullable)? (yes/no) [yes]:
 >

 Do you want to add a new property to User so that you can access/update Transfert objects from it - e.g. $user->getTransferts()? (yes/no) [yes]:
 >

 A new property will also be added to the User class so that you can access the related Transfert objects from it.

 New field name inside User [transferts]:
 > agentLivreurs

 updated: src/Entity/Transfert.php
 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields): >


           
  Success! 
           

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:entity

 Class name of the entity to create or update (e.g. GentleChef):
 > Ville

 Your entity already exists! So let's add some new fields!

 New property name (press <return> to stop adding fields):
 > villes

 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > User

What type of relationship is this?
 ------------ ------------------------------------------------------------------
  Type         Description                                                      
 ------------ ------------------------------------------------------------------
  ManyToOne    Each Ville relates to (has) one User.
               Each User can relate to (can have) many Ville objects.

  OneToMany    Each Ville can relate to (can have) many User objects.
               Each User relates to (has) one Ville.

  ManyToMany   Each Ville can relate to (can have) many User objects.
               Each User can also relate to (can also have) many Ville objects.

  OneToOne     Each Ville relates to (has) exactly one User.
               Each User also relates to (has) exactly one Ville.
 ------------ ------------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > OneToMany

 A new property will also be added to the User class so that you can access and set the related Ville object from it.

 New field name inside User [ville]:
 > villes

 Is the User.villes property allowed to be null (nullable)? (yes/no) [yes]:
 >

 updated: src/Entity/Ville.php
 updated: src/Entity/User.php

 Add another property? Enter the property name (or press <return> to stop adding fields): >


           
  Success! 
           

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:migration


           
  Success! 
           

 Next: Review the new migration "migrations/Version20230116224240.php"
 Then: Run the migration with php bin/console doctrine:migrations:migrate
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console doctrine:migrations:migrate

 WARNING! You are about to execute a migration in database "transfert_version2" that could result in schema changes and data loss. Are you sure you wish to continue? (yes/no) [yes]:
 >

[notice] Migrating up to DoctrineMigrations\Version20230116224240
[notice] finished in 12389.8ms, used 20M memory, 1 migrations executed, 8 sql queries

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:crud

 The class name of the entity to create CRUD (e.g. GrumpyPuppy):
 > Transfert

 Choose a name for your controller class (e.g. TransfertController) [TransfertController]:
 >

 Do you want to generate tests for the controller?. [Experimental] (yes/no) [no]:
 >

 created: src/Controller/TransfertController.php
 created: src/Form/TransfertType.php
 created: templates/transfert/_delete_form.html.twig
 created: templates/transfert/_form.html.twig
 created: templates/transfert/edit.html.twig
 created: templates/transfert/index.html.twig
 created: templates/transfert/new.html.twig
 created: templates/transfert/show.html.twig

           
  Success! 
           

 Next: Check your new CRUD by going to /transfert/
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:crud

 The class name of the entity to create CRUD (e.g. GentleElephant):
 > Ville

 Choose a name for your controller class (e.g. VilleController) [VilleController]:
 >

 Do you want to generate tests for the controller?. [Experimental] (yes/no) [no]:
 >

 created: src/Controller/VilleController.php
 created: src/Form/VilleType.php
 created: templates/ville/_delete_form.html.twig
 created: templates/ville/_form.html.twig
 created: templates/ville/edit.html.twig
 created: templates/ville/index.html.twig
 created: templates/ville/new.html.twig
 created: templates/ville/show.html.twig

           
  Success! 
           

 Next: Check your new CRUD by going to /ville/
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2>

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:registratio
n-form

 Creating a registration form for App\Entity\User

 Do you want to add a @UniqueEntity validation annotation on your User class to make sure duplicate accounts aren't created? (yes/no) [yes]:
 >

 Do you want to send an email to verify the user's email address after registration? (yes/no) [yes]:
 > no

 Do you want to automatically authenticate the user after registration? (yes/no) [yes]:
 >

 ! [NOTE] No Guard authenticators found - so your user won't be automatically           
 !        authenticated after registering.                                              

 What route should the user be redirected to after registration?:
  [0 ] _preview_error
  [1 ] _wdt
  [2 ] _profiler_home
  [3 ] _profiler_search
  [4 ] _profiler_search_bar
  [5 ] _profiler_phpinfo
  [6 ] _profiler_xdebug
  [7 ] _profiler_search_results
  [8 ] _profiler_open_file
  [9 ] _profiler
  [10] _profiler_router
  [11] _profiler_exception
  [12] _profiler_exception_css
  [13] home
  [14] app_transfert_index
  [15] app_transfert_new
  [16] app_transfert_show
  [17] app_transfert_edit
  [18] app_transfert_delete
  [19] app_ville_index
  [20] app_ville_new
  [21] app_ville_show
  [22] app_ville_edit
  [23] app_ville_delete
 > 13

 updated: src/Entity/User.php
 created: src/Form/RegistrationFormType.php
 created: src/Controller/RegistrationController.php
 created: templates/registration/register.html.twig

           
  Success! 
           

 Next:
 Make any changes you need to the form, controller & template.

 Then open your browser, go to "/register" and enjoy your new form!

PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2> php bin/console make:auth

 What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > LoginAuthenticator

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
 >

 Do you want to generate a '/logout' URL? (yes/no) [yes]:
 >

 created: src/Security/LoginAuthenticator.php
 updated: config/packages/security.yaml
 created: src/Controller/SecurityController.php
 created: templates/security/login.html.twig

           
  Success! 
           

 Next:
 - Customize your new authenticator.
 - Finish the redirect "TODO" in the App\Security\LoginAuthenticator::onAuthenticationSuccess() method.
 - Review & adapt the login template: templates/security/login.html.twig.
PS C:\Users\User\Desktop\Transfert_V2\projet_transfert2>